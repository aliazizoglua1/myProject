@page "{id:guid}"
@model MyProject.UI.RazorPages.Pages.Tasks.DeleteModel
@{
    ViewData["Title"] = "Delete Task";
}

<div class="row">
    <div class="col-md-8">
        <h2>Delete Task</h2>
        
        <div class="alert alert-warning">
            <h4 class="alert-heading">Are you sure you want to delete this task?</h4>
            <p>This action cannot be undone. All task data will be permanently removed.</p>
            @if (Model.Task?.Subtasks != null && Model.Task.Subtasks.Any())
            {
                <p><strong>Warning:</strong> This task has @Model.Task.Subtasks.Count() subtask(s) that may be affected.</p>
            }
        </div>

        @if (Model.Task != null)
        {
            <div class="card">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h4>@Model.Task.TaskName</h4>
                        <div>
                            <span class="badge @(Model.Task.TaskStatus == "Completed" ? "bg-success" : 
                                                 Model.Task.TaskStatus == "In Progress" ? "bg-warning" : 
                                                 Model.Task.TaskStatus == "On Hold" ? "bg-secondary" : "bg-primary") fs-6 me-2">
                                @Model.Task.TaskStatus
                            </span>
                            <span class="badge @(Model.Task.Priority == "High" ? "bg-danger" : 
                                                 Model.Task.Priority == "Medium" ? "bg-warning" : "bg-info") fs-6">
                                @Model.Task.Priority Priority
                            </span>
                            @if (Model.Task.IsMilestone)
                            {
                                <span class="badge bg-danger fs-6 ms-2">
                                    <i class="fas fa-flag"></i> Milestone
                                </span>
                            }
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <dl class="row">
                                <dt class="col-sm-4">Task Type:</dt>
                                <dd class="col-sm-8">@Model.Task.TaskType</dd>

                                <dt class="col-sm-4">Project:</dt>
                                <dd class="col-sm-8">@(Model.Task.Project?.ProjectName ?? "Not assigned")</dd>

                                <dt class="col-sm-4">Parent Task:</dt>
                                <dd class="col-sm-8">@(Model.Task.ParentTask?.TaskName ?? "None")</dd>

                                <dt class="col-sm-4">Assigned To:</dt>
                                <dd class="col-sm-8">@(Model.Task.AssignedToUserId?.ToString() ?? "Unassigned")</dd>

                                <dt class="col-sm-4">Start Date:</dt>
                                <dd class="col-sm-8">@Model.Task.PlannedStartDate.ToString("MMM dd, yyyy")</dd>

                                <dt class="col-sm-4">End Date:</dt>
                                <dd class="col-sm-8">@(Model.Task.PlannedEndDate?.ToString("MMM dd, yyyy") ?? "Not set")</dd>
                            </dl>
                        </div>
                        <div class="col-md-6">
                            <dl class="row">
                                <dt class="col-sm-4">Planned Effort:</dt>
                                <dd class="col-sm-8">@(Model.Task.PlannedEffortHours?.ToString("F1") ?? "Not set") hours</dd>

                                <dt class="col-sm-4">Actual Effort:</dt>
                                <dd class="col-sm-8">@(Model.Task.ActualEffortHours?.ToString("F1") ?? "Not recorded") hours</dd>

                                <dt class="col-sm-4">Created:</dt>
                                <dd class="col-sm-8">@Model.Task.CreatedAt.ToString("MMM dd, yyyy")</dd>

                                <dt class="col-sm-4">Updated:</dt>
                                <dd class="col-sm-8">@Model.Task.UpdatedAt.ToString("MMM dd, yyyy")</dd>

                                <dt class="col-sm-4">Task ID:</dt>
                                <dd class="col-sm-8"><code>@Model.Task.TaskId</code></dd>

                                @if (Model.Task.Subtasks != null && Model.Task.Subtasks.Any())
                                {
                                    <dt class="col-sm-4">Subtasks:</dt>
                                    <dd class="col-sm-8">@Model.Task.Subtasks.Count() subtask(s)</dd>
                                }
                            </dl>
                        </div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(Model.Task.Description))
                    {
                        <div class="mt-3">
                            <strong>Description:</strong>
                            <p>@Model.Task.Description</p>
                        </div>
                    }
                    
                    @if (!string.IsNullOrEmpty(Model.Task.Comments))
                    {
                        <div class="mt-3">
                            <strong>Comments:</strong>
                            <p>@Model.Task.Comments</p>
                        </div>
                    }

                    @if (Model.Task.Subtasks != null && Model.Task.Subtasks.Any())
                    {
                        <div class="mt-3">
                            <strong>Subtasks that will be affected:</strong>
                            <ul class="list-group list-group-flush mt-2">
                                @foreach (var subtask in Model.Task.Subtasks.Take(5))
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        @subtask.TaskName
                                        <span class="badge @(subtask.TaskStatus == "Completed" ? "bg-success" : 
                                                             subtask.TaskStatus == "In Progress" ? "bg-warning" : 
                                                             subtask.TaskStatus == "On Hold" ? "bg-secondary" : "bg-primary")">
                                            @subtask.TaskStatus
                                        </span>
                                    </li>
                                }
                                @if (Model.Task.Subtasks.Count() > 5)
                                {
                                    <li class="list-group-item text-muted">
                                        ... and @(Model.Task.Subtasks.Count() - 5) more subtask(s)
                                    </li>
                                }
                            </ul>
                        </div>
                    }
                </div>
            </div>

            <div class="mt-4">
                <form method="post">
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash"></i> Delete Task
                    </button>
                    <a asp-page="./Index" class="btn btn-secondary">Cancel</a>
                </form>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script src="https://kit.fontawesome.com/your-fontawesome-kit.js" crossorigin="anonymous"></script>
}