@page "/tasks"
@using MyProject.UI.ProjectManagementConsole.Models
@using MyProject.UI.ProjectManagementConsole.Services
@inject ITaskService TaskService
@inject NavigationManager Navigation

<PageTitle>Tasks</PageTitle>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <h1>Tasks</h1>
        </div>
        <div class="col-auto">
            <a href="/tasks/create" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i> Add Task
            </a>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                @if (tasks.Count == 0)
                {
                    <div class="text-center py-4">
                        <i class="bi bi-list-task display-1 text-muted"></i>
                        <h3 class="mt-3">No Tasks Found</h3>
                        <p class="text-muted">Get started by adding your first task.</p>
                        <a href="/tasks/create" class="btn btn-primary">
                            <i class="bi bi-plus-circle"></i> Add Task
                        </a>
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>Task Name</th>
                                    <th>Project</th>
                                    <th>Status</th>
                                    <th>Priority</th>
                                    <th>Assigned To</th>
                                    <th>Progress</th>
                                    <th>Due Date</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var task in tasks)
                                {
                                    <tr>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div class="flex-shrink-0">
                                                    <i class="bi bi-list-task fs-4 text-primary"></i>
                                                </div>
                                                <div class="flex-grow-1 ms-2">
                                                    <strong>@task.TaskName</strong>
                                                    @if (!string.IsNullOrEmpty(task.Description))
                                                    {
                                                        <br />
                                                        <small class="text-muted">@(task.Description.Length > 50 ? task.Description.Substring(0, 50) + "..." : task.Description)</small>
                                                    }
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            @if (task.Project != null)
                                            {
                                                <span class="badge bg-info">@task.Project.ProjectName</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">No Project</span>
                                            }
                                        </td>
                                        <td>
                                            <span class="badge @GetTaskStatusBadgeClass(task.TaskStatus)">
                                                @task.TaskStatus
                                            </span>
                                        </td>
                                        <td>
                                            <span class="badge @GetPriorityBadgeClass(task.Priority)">
                                                @task.Priority
                                            </span>
                                        </td>
                                        <td>
                                            @if (task.AssignedToUser != null)
                                            {
                                                <span>@task.AssignedToUser.FirstName @task.AssignedToUser.LastName</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Unassigned</span>
                                            }
                                        </td>
                                        <td>
                                            @if (task.ProgressPercentage.HasValue)
                                            {
                                                <div class="progress" style="height: 20px;">
                                                    <div class="progress-bar @GetProgressBarClass(task.ProgressPercentage.Value)" 
                                                         role="progressbar" 
                                                         style="width: @task.ProgressPercentage.Value%"
                                                         aria-valuenow="@task.ProgressPercentage.Value" 
                                                         aria-valuemin="0" 
                                                         aria-valuemax="100">
                                                        @task.ProgressPercentage.Value%
                                                    </div>
                                                </div>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Not set</span>
                                            }
                                        </td>
                                        <td>
                                            @if (task.PlannedEndDate.HasValue)
                                            {
                                                var isOverdue = task.PlannedEndDate.Value < DateOnly.FromDateTime(DateTime.Today) && task.TaskStatus != "Completed";
                                                <span class="@(isOverdue ? "text-danger fw-bold" : "")">
                                                    @task.PlannedEndDate.Value.ToString("MMM dd, yyyy")
                                                    @if (isOverdue)
                                                    {
                                                        <i class="bi bi-exclamation-triangle text-danger"></i>
                                                    }
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Not set</span>
                                            }
                                        </td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <a href="/tasks/@task.TaskId" class="btn btn-sm btn-outline-primary">
                                                    <i class="bi bi-eye"></i> View
                                                </a>
                                                <a href="/tasks/@task.TaskId/edit" class="btn btn-sm btn-outline-secondary">
                                                    <i class="bi bi-pencil"></i> Edit
                                                </a>
                                                <button type="button" class="btn btn-sm btn-outline-danger" @onclick="() => DeleteTask(task.TaskId)">
                                                    <i class="bi bi-trash"></i> Delete
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private List<TaskDto> tasks = new();
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
    }

    private async Task LoadTasks()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            tasks = await TaskService.GetTasksAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading tasks: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeleteTask(Guid id)
    {
        if (await TaskService.DeleteTaskAsync(id))
        {
            await LoadTasks();
        }
        else
        {
            errorMessage = "Failed to delete task";
        }
    }

    private string GetTaskStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "to do" => "bg-secondary",
            "in progress" => "bg-warning",
            "completed" => "bg-success",
            "on hold" => "bg-info",
            "cancelled" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetPriorityBadgeClass(string priority)
    {
        return priority.ToLower() switch
        {
            "low" => "bg-success",
            "medium" => "bg-warning",
            "high" => "bg-danger",
            "urgent" => "bg-dark",
            _ => "bg-secondary"
        };
    }

    private string GetProgressBarClass(decimal progress)
    {
        return progress switch
        {
            >= 80 => "bg-success",
            >= 50 => "bg-warning",
            >= 20 => "bg-info",
            _ => "bg-secondary"
        };
    }
} 