@page "/milestones"
@using MyProject.UI.ProjectManagementConsole.Models
@using MyProject.UI.ProjectManagementConsole.Services
@inject IMilestoneService MilestoneService
@inject NavigationManager Navigation

<PageTitle>Milestones</PageTitle>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <h1>Milestones</h1>
        </div>
        <div class="col text-end">
            <a href="/milestones/create" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i> Add Milestone
            </a>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-header">
                <h5>All Milestones (@milestones.Count)</h5>
            </div>
            <div class="card-body">
                @if (milestones.Count == 0)
                {
                    <div class="text-center py-4">
                        <i class="bi bi-flag display-1 text-muted"></i>
                        <h4 class="text-muted mt-3">No Milestones Found</h4>
                        <p class="text-muted">Get started by creating your first milestone.</p>
                        <a href="/milestones/create" class="btn btn-primary">
                            <i class="bi bi-plus-circle"></i> Add Milestone
                        </a>
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Milestone</th>
                                    <th>Project</th>
                                    <th>Status</th>
                                    <th>Target Date</th>
                                    <th>Achieved Date</th>
                                    <th>Timeline</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var milestone in milestones)
                                {
                                    <tr>
                                        <td>
                                            <div>
                                                <strong>@milestone.MilestoneName</strong>
                                                @if (!string.IsNullOrEmpty(milestone.Description))
                                                {
                                                    <br />
                                                    <small class="text-muted">@milestone.Description</small>
                                                }
                                            </div>
                                        </td>
                                        <td>
                                            @if (milestone.Project != null)
                                            {
                                                <span class="badge bg-info">@milestone.Project.ProjectName</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">No project</span>
                                            }
                                        </td>
                                        <td>
                                            @if (milestone.IsAchieved)
                                            {
                                                <span class="badge bg-success">
                                                    <i class="bi bi-check-circle"></i> Achieved
                                                </span>
                                            }
                                            else
                                            {
                                                @if (milestone.TargetDate.HasValue)
                                                {
                                                    var daysRemaining = milestone.TargetDate.Value.DayNumber - DateOnly.FromDateTime(DateTime.Today).DayNumber;
                                                    if (daysRemaining < 0)
                                                    {
                                                        <span class="badge bg-danger">
                                                            <i class="bi bi-exclamation-triangle"></i> Overdue
                                                        </span>
                                                    }
                                                    else if (daysRemaining <= 7)
                                                    {
                                                        <span class="badge bg-warning">
                                                            <i class="bi bi-clock"></i> Due Soon
                                                        </span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-info">
                                                            <i class="bi bi-clock"></i> On Track
                                                        </span>
                                                    }
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">
                                                        <i class="bi bi-question-circle"></i> No Target Date
                                                    </span>
                                                }
                                            }
                                        </td>
                                        <td>
                                            @if (milestone.TargetDate.HasValue)
                                            {
                                                <span>@milestone.TargetDate.Value.ToString("MMM dd, yyyy")</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Not set</span>
                                            }
                                        </td>
                                        <td>
                                            @if (milestone.AchievedDate.HasValue)
                                            {
                                                <span class="text-success">@milestone.AchievedDate.Value.ToString("MMM dd, yyyy")</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Not achieved</span>
                                            }
                                        </td>
                                        <td>
                                            @if (!milestone.IsAchieved)
                                            {
                                                @if (milestone.TargetDate.HasValue)
                                                {
                                                    var daysRemaining = milestone.TargetDate.Value.DayNumber - DateOnly.FromDateTime(DateTime.Today).DayNumber;
                                                    if (daysRemaining < 0)
                                                    {
                                                        <span class="text-danger fw-bold">
                                                            @Math.Abs(daysRemaining) days overdue
                                                        </span>
                                                    }
                                                    else if (daysRemaining == 0)
                                                    {
                                                        <span class="text-warning fw-bold">Due today</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="@(daysRemaining <= 7 ? "text-warning fw-bold" : "")">
                                                            @daysRemaining days remaining
                                                        </span>
                                                    }
                                                }
                                                else
                                                {
                                                    <span class="text-muted">No target date</span>
                                                }
                                            }
                                            else
                                            {
                                                <span class="text-success">Achieved</span>
                                            }
                                        </td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <a href="/milestones/@milestone.MilestoneId" class="btn btn-sm btn-outline-primary">
                                                    <i class="bi bi-eye"></i> View
                                                </a>
                                                <a href="/milestones/@milestone.MilestoneId/edit" class="btn btn-sm btn-outline-secondary">
                                                    <i class="bi bi-pencil"></i> Edit
                                                </a>
                                                @if (!milestone.IsAchieved)
                                                {
                                                    <button type="button" class="btn btn-sm btn-outline-success" @onclick="() => MarkAchieved(milestone.MilestoneId)">
                                                        <i class="bi bi-check-circle"></i> Mark Achieved
                                                    </button>
                                                }
                                                <button type="button" class="btn btn-sm btn-outline-danger" @onclick="() => DeleteMilestone(milestone.MilestoneId)">
                                                    <i class="bi bi-trash"></i> Delete
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private List<MilestoneDto> milestones = new();
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadMilestones();
    }

    private async Task LoadMilestones()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            milestones = await MilestoneService.GetMilestonesAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading milestones: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeleteMilestone(Guid milestoneId)
    {
        if (await MilestoneService.DeleteMilestoneAsync(milestoneId))
        {
            await LoadMilestones();
        }
        else
        {
            errorMessage = "Failed to delete milestone";
        }
    }

    private async Task MarkAchieved(Guid milestoneId)
    {
        try
        {
            var markAchievedDto = new MarkMilestoneAchievedDto
            {
                AchievedDate = DateOnly.FromDateTime(DateTime.Today),
                Notes = "Marked as achieved"
            };

            var updatedMilestone = await MilestoneService.MarkMilestoneAchievedAsync(milestoneId, markAchievedDto);
            if (updatedMilestone != null)
            {
                await LoadMilestones();
            }
            else
            {
                errorMessage = "Failed to mark milestone as achieved";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error marking milestone as achieved: {ex.Message}";
        }
    }
} 