@page "/risks"
@using MyProject.UI.ProjectManagementConsole.Models
@using MyProject.UI.ProjectManagementConsole.Services
@inject IRiskService RiskService
@inject NavigationManager Navigation

<PageTitle>Risks</PageTitle>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <h1>Risks</h1>
        </div>
        <div class="col-auto">
            <a href="/risks/create" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i> Add Risk
            </a>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                @if (risks.Count == 0)
                {
                    <div class="text-center py-4">
                        <i class="bi bi-exclamation-triangle display-1 text-muted"></i>
                        <h3 class="mt-3">No Risks Found</h3>
                        <p class="text-muted">Get started by adding your first risk assessment.</p>
                        <a href="/risks/create" class="btn btn-primary">
                            <i class="bi bi-plus-circle"></i> Add Risk
                        </a>
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>Risk Name</th>
                                    <th>Project</th>
                                    <th>Category</th>
                                    <th>Status</th>
                                    <th>Level</th>
                                    <th>Exposure Score</th>
                                    <th>Owner</th>
                                    <th>Identified Date</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var risk in risks)
                                {
                                    <tr>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div class="flex-shrink-0">
                                                    <i class="bi bi-exclamation-triangle fs-4 text-warning"></i>
                                                </div>
                                                <div class="flex-grow-1 ms-2">
                                                    <strong>@risk.RiskName</strong>
                                                    @if (!string.IsNullOrEmpty(risk.Description))
                                                    {
                                                        <br />
                                                        <small class="text-muted">@(risk.Description.Length > 50 ? risk.Description.Substring(0, 50) + "..." : risk.Description)</small>
                                                    }
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            @if (risk.Project != null)
                                            {
                                                <span class="badge bg-info">@risk.Project.ProjectName</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">No Project</span>
                                            }
                                        </td>
                                        <td>
                                            <span class="badge bg-secondary">@risk.RiskCategory</span>
                                        </td>
                                        <td>
                                            <span class="badge @GetRiskStatusBadgeClass(risk.RiskStatus)">
                                                @risk.RiskStatus
                                            </span>
                                        </td>
                                        <td>
                                            <span class="badge @GetRiskLevelBadgeClass(risk.RiskLevel)">
                                                @risk.RiskLevel
                                            </span>
                                        </td>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div class="me-2">
                                                    <strong class="@GetExposureScoreClass(risk.ExposureScore)">
                                                        @risk.ExposureScore
                                                    </strong>
                                                </div>
                                                <div class="flex-grow-1">
                                                    <div class="progress" style="height: 8px;">
                                                        <div class="progress-bar @GetExposureProgressBarClass(risk.ExposureScore)" 
                                                             role="progressbar" 
                                                             style="width: @(risk.ExposureScore * 10)%"
                                                             aria-valuenow="@risk.ExposureScore" 
                                                             aria-valuemin="0" 
                                                             aria-valuemax="100">
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            @if (risk.RiskOwner != null)
                                            {
                                                <span>@risk.RiskOwner.FirstName @risk.RiskOwner.LastName</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Unassigned</span>
                                            }
                                        </td>
                                        <td>
                                            <span>@risk.IdentifiedDate?.ToString("MMM dd, yyyy")</span>
                                        </td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <a href="/risks/@risk.RiskId" class="btn btn-sm btn-outline-primary">
                                                    <i class="bi bi-eye"></i> View
                                                </a>
                                                <a href="/risks/@risk.RiskId/edit" class="btn btn-sm btn-outline-secondary">
                                                    <i class="bi bi-pencil"></i> Edit
                                                </a>
                                                <button type="button" class="btn btn-sm btn-outline-danger" @onclick="() => DeleteRisk(risk.RiskId)">
                                                    <i class="bi bi-trash"></i> Delete
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private List<RiskDto> risks = new();
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadRisks();
    }

    private async Task LoadRisks()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            risks = await RiskService.GetRisksAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading risks: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeleteRisk(Guid id)
    {
        if (await RiskService.DeleteRiskAsync(id))
        {
            await LoadRisks();
        }
        else
        {
            errorMessage = "Failed to delete risk";
        }
    }

    private string GetRiskStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "open" => "bg-warning",
            "mitigated" => "bg-success",
            "closed" => "bg-secondary",
            "monitoring" => "bg-info",
            "escalated" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetRiskLevelBadgeClass(string level)
    {
        return level.ToLower() switch
        {
            "low" => "bg-success",
            "medium" => "bg-warning",
            "high" => "bg-danger",
            "critical" => "bg-dark",
            _ => "bg-secondary"
        };
    }

    private string GetExposureScoreClass(int score)
    {
        return score switch
        {
            >= 80 => "text-danger fw-bold",
            >= 60 => "text-warning fw-bold",
            >= 40 => "text-info fw-bold",
            >= 20 => "text-success",
            _ => "text-muted"
        };
    }

    private string GetExposureProgressBarClass(int score)
    {
        return score switch
        {
            >= 80 => "bg-danger",
            >= 60 => "bg-warning",
            >= 40 => "bg-info",
            >= 20 => "bg-success",
            _ => "bg-secondary"
        };
    }
} 