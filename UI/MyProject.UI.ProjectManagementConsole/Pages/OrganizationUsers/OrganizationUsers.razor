@page "/organizationusers"
@using MyProject.UI.ProjectManagementConsole.Models
@using MyProject.UI.ProjectManagementConsole.Services
@inject IOrganizationUserService OrganizationUserService
@inject NavigationManager Navigation

<PageTitle>Organization Users</PageTitle>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <h1>Organization Users</h1>
        </div>
        <div class="col-auto">
            <a href="/organizationusers/create" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i> Add User to Organization
            </a>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                @if (organizationUsers.Count == 0)
                {
                    <div class="text-center py-4">
                        <i class="bi bi-people display-1 text-muted"></i>
                        <h3 class="mt-3">No Organization Users Found</h3>
                        <p class="text-muted">Get started by adding users to organizations.</p>
                        <a href="/organizationusers/create" class="btn btn-primary">
                            <i class="bi bi-plus-circle"></i> Add User to Organization
                        </a>
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>User</th>
                                    <th>Organization</th>
                                    <th>Role</th>
                                    <th>Access Level</th>
                                    <th>Status</th>
                                    <th>Joined Date</th>
                                    <th>Last Access</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var orgUser in organizationUsers)
                                {
                                    <tr>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div class="flex-shrink-0">
                                                    <i class="bi bi-person-circle fs-4 text-primary"></i>
                                                </div>
                                                <div class="flex-grow-1 ms-2">
                                                    @if (orgUser.User != null)
                                                    {
                                                        <strong>@orgUser.User.FirstName @orgUser.User.LastName</strong>
                                                        <br />
                                                        <small class="text-muted">@orgUser.User.Email</small>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">User not found</span>
                                                    }
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            @if (orgUser.Organization != null)
                                            {
                                                <div>
                                                    <strong>@orgUser.Organization.OrganizationName</strong>
                                                    <br />
                                                    <small class="text-muted">@orgUser.Organization.Status</small>
                                                </div>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Organization not found</span>
                                            }
                                        </td>
                                        <td>
                                            <span class="badge bg-info">@orgUser.Role</span>
                                        </td>
                                        <td>
                                            <span class="badge @GetAccessLevelBadgeClass(orgUser.AccessLevel)">
                                                @orgUser.AccessLevel
                                            </span>
                                        </td>
                                        <td>
                                            <span class="badge @(orgUser.IsActive ? "bg-success" : "bg-secondary")">
                                                @(orgUser.IsActive ? "Active" : "Inactive")
                                            </span>
                                        </td>
                                        <td>@orgUser.JoinedDate.ToString("MMM dd, yyyy")</td>
                                        <td>
                                            @if (orgUser.LastAccessDate.HasValue)
                                            {
                                                <span>@orgUser.LastAccessDate.Value.ToString("MMM dd, yyyy")</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Never</span>
                                            }
                                        </td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <a href="/organizationusers/@orgUser.OrganizationId/@orgUser.UserId" class="btn btn-sm btn-outline-primary">
                                                    <i class="bi bi-eye"></i> View
                                                </a>
                                                <a href="/organizationusers/@orgUser.OrganizationId/@orgUser.UserId/edit" class="btn btn-sm btn-outline-secondary">
                                                    <i class="bi bi-pencil"></i> Edit
                                                </a>
                                                <button type="button" class="btn btn-sm btn-outline-danger" @onclick="() => DeleteOrganizationUser(orgUser.OrganizationId, orgUser.UserId)">
                                                    <i class="bi bi-trash"></i> Remove
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private List<OrganizationUserDto> organizationUsers = new();
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrganizationUsers();
    }

    private async Task LoadOrganizationUsers()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            organizationUsers = await OrganizationUserService.GetOrganizationUsersAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading organization users: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeleteOrganizationUser(Guid organizationId, Guid userId)
    {
        if (await OrganizationUserService.DeleteOrganizationUserAsync(organizationId, userId))
        {
            await LoadOrganizationUsers();
        }
        else
        {
            errorMessage = "Failed to remove user from organization";
        }
    }

    private string GetAccessLevelBadgeClass(string accessLevel)
    {
        return accessLevel.ToLower() switch
        {
            "admin" => "bg-danger",
            "manager" => "bg-warning",
            "member" => "bg-success",
            "viewer" => "bg-info",
            "guest" => "bg-secondary",
            _ => "bg-secondary"
        };
    }
} 