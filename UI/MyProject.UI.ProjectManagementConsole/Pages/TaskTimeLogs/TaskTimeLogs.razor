@page "/tasktimelogs"
@using MyProject.UI.ProjectManagementConsole.Models
@using MyProject.UI.ProjectManagementConsole.Services
@inject ITaskTimeLogService TaskTimeLogService
@inject NavigationManager Navigation

<PageTitle>Task Time Logs</PageTitle>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <h1>Task Time Logs</h1>
        </div>
        <div class="col-auto">
            <a href="/tasktimelogs/create" class="btn btn-primary">
                <i class="bi bi-plus-circle"></i> Add Time Log
            </a>
        </div>
    </div>

    <!-- Filter Section -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0"><i class="bi bi-funnel"></i> Filters</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-3">
                    <label for="dateFrom" class="form-label">Date From</label>
                    <input type="date" class="form-control" id="dateFrom" @bind="filterDateFrom" @bind:format="yyyy-MM-dd" />
                </div>
                <div class="col-md-3">
                    <label for="dateTo" class="form-label">Date To</label>
                    <input type="date" class="form-control" id="dateTo" @bind="filterDateTo" @bind:format="yyyy-MM-dd" />
                </div>
                <div class="col-md-3">
                    <label for="workType" class="form-label">Work Type</label>
                    <select class="form-select" id="workType" @bind="filterWorkType">
                        <option value="">All Types</option>
                        <option value="Development">Development</option>
                        <option value="Testing">Testing</option>
                        <option value="Design">Design</option>
                        <option value="Documentation">Documentation</option>
                        <option value="Meeting">Meeting</option>
                        <option value="Research">Research</option>
                        <option value="Support">Support</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="billable" class="form-label">Billable</label>
                    <select class="form-select" id="billable" @bind="filterBillable">
                        <option value="">All</option>
                        <option value="true">Billable</option>
                        <option value="false">Non-Billable</option>
                    </select>
                </div>
            </div>
            <div class="row mt-3">
                <div class="col">
                    <button type="button" class="btn btn-primary" @onclick="ApplyFilters">
                        <i class="bi bi-search"></i> Apply Filters
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="ClearFilters">
                        <i class="bi bi-x-circle"></i> Clear Filters
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                @if (taskTimeLogs.Count == 0)
                {
                    <div class="text-center py-4">
                        <i class="bi bi-clock display-1 text-muted"></i>
                        <h3 class="mt-3">No Time Logs Found</h3>
                        <p class="text-muted">Get started by adding your first time log.</p>
                        <a href="/tasktimelogs/create" class="btn btn-primary">
                            <i class="bi bi-plus-circle"></i> Add Time Log
                        </a>
                    </div>
                }
                else
                {
                    <!-- Summary Statistics -->
                    <div class="row mb-4">
                        <div class="col-md-3">
                            <div class="card bg-primary text-white">
                                <div class="card-body text-center">
                                    <h5 class="card-title">Total Hours</h5>
                                    <h3 class="mb-0">@totalHours.ToString("F1")</h3>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-success text-white">
                                <div class="card-body text-center">
                                    <h5 class="card-title">Billable Hours</h5>
                                    <h3 class="mb-0">@billableHours.ToString("F1")</h3>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-info text-white">
                                <div class="card-body text-center">
                                    <h5 class="card-title">Total Cost</h5>
                                    <h3 class="mb-0">$@totalCost.ToString("F2")</h3>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card bg-warning text-white">
                                <div class="card-body text-center">
                                    <h5 class="card-title">Log Count</h5>
                                    <h3 class="mb-0">@taskTimeLogs.Count</h3>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>Date</th>
                                    <th>Task</th>
                                    <th>Resource</th>
                                    <th>Hours</th>
                                    <th>Work Type</th>
                                    <th>Description</th>
                                    <th>Billable</th>
                                    <th>Rate</th>
                                    <th>Cost</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var timeLog in taskTimeLogs)
                                {
                                    <tr>
                                        <td>
                                            <span class="fw-bold">@timeLog.DateWorked.ToString("MMM dd, yyyy")</span>
                                        </td>
                                        <td>
                                            @if (timeLog.Task != null)
                                            {
                                                <div>
                                                    <strong>@timeLog.Task.TaskName</strong>
                                                    <br />
                                                    <small class="text-muted">@timeLog.Task.TaskStatus</small>
                                                </div>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Unknown Task</span>
                                            }
                                        </td>
                                        <td>
                                            @if (timeLog.Resource != null)
                                            {
                                                <span>@timeLog.Resource.FirstName @timeLog.Resource.LastName</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">Unknown Resource</span>
                                            }
                                        </td>
                                        <td>
                                            <span class="badge bg-primary fs-6">@timeLog.HoursWorked.ToString("F1")h</span>
                                        </td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(timeLog.WorkType))
                                            {
                                                <span class="badge bg-secondary">@timeLog.WorkType</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(timeLog.Description))
                                            {
                                                <span title="@timeLog.Description">
                                                    @(timeLog.Description.Length > 50 ? timeLog.Description.Substring(0, 50) + "..." : timeLog.Description)
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">No description</span>
                                            }
                                        </td>
                                        <td>
                                            <span class="badge @(timeLog.IsBillable ? "bg-success" : "bg-secondary")">
                                                @(timeLog.IsBillable ? "Billable" : "Non-Billable")
                                            </span>
                                        </td>
                                        <td>
                                            @if (timeLog.HourlyRate.HasValue)
                                            {
                                                <span>$@timeLog.HourlyRate.Value.ToString("F2")/h</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </td>
                                        <td>
                                            @if (timeLog.TotalCost.HasValue)
                                            {
                                                <span class="fw-bold text-success">$@timeLog.TotalCost.Value.ToString("F2")</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <a href="/tasktimelogs/@timeLog.TaskTimeLogId" class="btn btn-sm btn-outline-primary">
                                                    <i class="bi bi-eye"></i> View
                                                </a>
                                                <a href="/tasktimelogs/@timeLog.TaskTimeLogId/edit" class="btn btn-sm btn-outline-secondary">
                                                    <i class="bi bi-pencil"></i> Edit
                                                </a>
                                                <button type="button" class="btn btn-sm btn-outline-danger" @onclick="() => DeleteTimeLog(timeLog.TaskTimeLogId)">
                                                    <i class="bi bi-trash"></i> Delete
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private List<TaskTimeLogDto> taskTimeLogs = new();
    private bool isLoading = true;
    private string? errorMessage;
    
    // Filter properties
    private DateOnly? filterDateFrom;
    private DateOnly? filterDateTo;
    private string filterWorkType = "";
    private string filterBillable = "";
    
    // Summary statistics
    private decimal totalHours = 0;
    private decimal billableHours = 0;
    private decimal totalCost = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadTaskTimeLogs();
    }

    private async Task LoadTaskTimeLogs()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            
            if (filterDateFrom.HasValue && filterDateTo.HasValue)
            {
                taskTimeLogs = await TaskTimeLogService.GetByDateRangeAsync(filterDateFrom.Value, filterDateTo.Value);
            }
            else
            {
                taskTimeLogs = await TaskTimeLogService.GetTaskTimeLogsAsync();
            }
            
            // Apply additional filters
            if (!string.IsNullOrEmpty(filterWorkType))
            {
                taskTimeLogs = taskTimeLogs.Where(t => t.WorkType == filterWorkType).ToList();
            }
            
            if (!string.IsNullOrEmpty(filterBillable))
            {
                bool isBillable = filterBillable == "true";
                taskTimeLogs = taskTimeLogs.Where(t => t.IsBillable == isBillable).ToList();
            }
            
            CalculateSummaryStatistics();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading time logs: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CalculateSummaryStatistics()
    {
        totalHours = taskTimeLogs.Sum(t => t.HoursWorked);
        billableHours = taskTimeLogs.Where(t => t.IsBillable).Sum(t => t.HoursWorked);
        totalCost = taskTimeLogs.Where(t => t.TotalCost.HasValue).Sum(t => t.TotalCost.Value);
    }

    private async Task ApplyFilters()
    {
        await LoadTaskTimeLogs();
    }

    private async Task ClearFilters()
    {
        filterDateFrom = null;
        filterDateTo = null;
        filterWorkType = "";
        filterBillable = "";
        await LoadTaskTimeLogs();
    }

    private async Task DeleteTimeLog(Guid id)
    {
        if (await TaskTimeLogService.DeleteTaskTimeLogAsync(id))
        {
            await LoadTaskTimeLogs();
        }
        else
        {
            errorMessage = "Failed to delete time log";
        }
    }
} 