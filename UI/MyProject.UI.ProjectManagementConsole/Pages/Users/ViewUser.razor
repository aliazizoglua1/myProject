@page "/users/{Id:guid}"
@using MyProject.UI.ProjectManagementConsole.Models
@using MyProject.UI.ProjectManagementConsole.Services
@inject IUserService UserService
@inject NavigationManager Navigation

<PageTitle>User Details</PageTitle>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/users">Users</a></li>
                    <li class="breadcrumb-item active" aria-current="page">User Details</li>
                </ol>
            </nav>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
    else if (user == null)
    {
        <div class="alert alert-warning" role="alert">
            User not found.
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h2>@user.FirstName @user.LastName</h2>
                        <div class="btn-group">
                            <a href="/users/@user.UserId/edit" class="btn btn-primary">
                                <i class="bi bi-pencil"></i> Edit
                            </a>
                            <button type="button" class="btn btn-danger" @onclick="DeleteUser">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <h5>Basic Information</h5>
                                <dl class="row">
                                    <dt class="col-sm-4">User ID</dt>
                                    <dd class="col-sm-8">
                                        <code>@user.UserId</code>
                                    </dd>

                                    <dt class="col-sm-4">Full Name</dt>
                                    <dd class="col-sm-8">@user.FirstName @user.LastName</dd>

                                    <dt class="col-sm-4">Email</dt>
                                    <dd class="col-sm-8">
                                        <a href="mailto:@user.Email">@user.Email</a>
                                    </dd>

                                    <dt class="col-sm-4">Status</dt>
                                    <dd class="col-sm-8">
                                        <span class="badge @(user.IsActive ? "bg-success" : "bg-secondary")">
                                            @(user.IsActive ? "Active" : "Inactive")
                                        </span>
                                    </dd>
                                </dl>
                            </div>
                            <div class="col-md-6">
                                <h5>Account Information</h5>
                                <dl class="row">
                                    <dt class="col-sm-4">Created</dt>
                                    <dd class="col-sm-8">@user.CreatedAt.ToString("MMM dd, yyyy 'at' HH:mm")</dd>

                                    <dt class="col-sm-4">Last Updated</dt>
                                    <dd class="col-sm-8">@user.UpdatedAt.ToString("MMM dd, yyyy 'at' HH:mm")</dd>

                                    <dt class="col-sm-4">Account Age</dt>
                                    <dd class="col-sm-8">@GetAccountAge(user.CreatedAt)</dd>
                                </dl>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-4">
                <div class="card">
                    <div class="card-header">
                        <h5>User Profile</h5>
                    </div>
                    <div class="card-body text-center">
                        <div class="mb-3">
                            <i class="bi bi-person-circle display-1 text-primary"></i>
                        </div>
                        <h5>@user.FirstName @user.LastName</h5>
                        <p class="text-muted">@user.Email</p>
                        <div class="mb-3">
                            <span class="badge @(user.IsActive ? "bg-success" : "bg-secondary") fs-6">
                                @(user.IsActive ? "Active User" : "Inactive User")
                            </span>
                        </div>
                        <p class="text-muted small">
                            @(user.IsActive ? "This user can log in and access the system." : "This user cannot log in (account disabled).")
                        </p>
                    </div>
                </div>

                <div class="card mt-3">
                    <div class="card-header">
                        <h5>Quick Actions</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            <a href="/users/@user.UserId/edit" class="btn btn-primary">
                                <i class="bi bi-pencil"></i> Edit User
                            </a>
                            <a href="/users" class="btn btn-outline-secondary">
                                <i class="bi bi-arrow-left"></i> Back to Users
                            </a>
                            <button type="button" class="btn btn-outline-danger" @onclick="DeleteUser">
                                <i class="bi bi-trash"></i> Delete User
                            </button>
                        </div>
                    </div>
                </div>

                <div class="card mt-3">
                    <div class="card-header">
                        <h5>User Statistics</h5>
                    </div>
                    <div class="card-body">
                        <div class="row text-center">
                            <div class="col-6">
                                <div class="border-end">
                                    <h4 class="text-primary">@GetDaysSinceCreated(user.CreatedAt)</h4>
                                    <small class="text-muted">Days Active</small>
                                </div>
                            </div>
                            <div class="col-6">
                                <h4 class="text-success">@(user.IsActive ? "Yes" : "No")</h4>
                                <small class="text-muted">Can Login</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private UserDto? user;
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadUser();
    }

    private async Task LoadUser()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            user = await UserService.GetUserAsync(Id);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading user: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeleteUser()
    {
        if (user != null && await UserService.DeleteUserAsync(user.UserId))
        {
            Navigation.NavigateTo("/users");
        }
        else
        {
            errorMessage = "Failed to delete user";
        }
    }

    private string GetAccountAge(DateTime createdAt)
    {
        var age = DateTime.Now - createdAt;
        if (age.TotalDays < 1)
            return "Less than a day";
        else if (age.TotalDays < 30)
            return $"{(int)age.TotalDays} days";
        else if (age.TotalDays < 365)
            return $"{(int)(age.TotalDays / 30)} months";
        else
            return $"{(int)(age.TotalDays / 365)} years";
    }

    private int GetDaysSinceCreated(DateTime createdAt)
    {
        return (int)(DateTime.Now - createdAt).TotalDays;
    }
} 